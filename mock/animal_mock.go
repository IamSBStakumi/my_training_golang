// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/animal/give_birth.go
//
// Generated by this command:
//
//	mockgen -source=./internal/animal/give_birth.go -destination=./mock/animal_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAInterface is a mock of AInterface interface.
type MockAInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAInterfaceMockRecorder
	isgomock struct{}
}

// MockAInterfaceMockRecorder is the mock recorder for MockAInterface.
type MockAInterfaceMockRecorder struct {
	mock *MockAInterface
}

// NewMockAInterface creates a new mock instance.
func NewMockAInterface(ctrl *gomock.Controller) *MockAInterface {
	mock := &MockAInterface{ctrl: ctrl}
	mock.recorder = &MockAInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAInterface) EXPECT() *MockAInterfaceMockRecorder {
	return m.recorder
}

// Eat mocks base method.
func (m *MockAInterface) Eat(food string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eat", food)
	ret0, _ := ret[0].(error)
	return ret0
}

// Eat indicates an expected call of Eat.
func (mr *MockAInterfaceMockRecorder) Eat(food any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eat", reflect.TypeOf((*MockAInterface)(nil).Eat), food)
}

// Walk mocks base method.
func (m *MockAInterface) Walk() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk")
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockAInterfaceMockRecorder) Walk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockAInterface)(nil).Walk))
}
